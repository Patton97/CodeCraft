import java.awt.Color;
import java.util.concurrent.TimeUnit;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.geom.AffineTransform;
import javax.swing.JFrame;
import javax.swing.JPanel;
import java.awt.TexturePaint;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import java.awt.Toolkit;
import java.util.ArrayList;
import java.awt.Point;
import java.util.Scanner;
import java.io.File;
import java.io.FileNotFoundException;
public class Level extends JPanel {    
    private static int MAX_ROWS    = 15;
    private static int MAX_COLUMNS = 15;    
    private static int TILE_SIZE   = 50;    
    
    private Rectangle tile = new Rectangle(0,0,TILE_SIZE,TILE_SIZE);  

    private int roverX = 0;
    private int roverY = 0;
    
    private int iFrame = 0;
    
    private int[][] tilemap = new int[MAX_ROWS][MAX_COLUMNS];
    
    private Rover rover = Rover.getRover();
    
    private ArrayList<TexturePaint> texturePaints = new ArrayList<TexturePaint>();
    private ArrayList<Point> frames = new ArrayList<Point>();
    
    private static Level levelSingleton;
    /**
     * Factory method to get the canvas singleton object.
     */
    public static Level getLevel()
    {
        if(levelSingleton == null) {
            levelSingleton = new Level();
        }
        levelSingleton.setVisible(true);
        return levelSingleton;
    }
    
    /**
     * Level Constructor initialises the texture paints into the arraylist
     */
    public Level()
    {
        //Initialise Tile Types
        try 
        {
            //Dynamically assign texture paints
            texturePaints.add(new TexturePaint(ImageIO.read(new File("Images/surface.jpg")), tile));
            texturePaints.add(new TexturePaint(ImageIO.read(new File("Images/rover.png")), tile));
            texturePaints.add(new TexturePaint(ImageIO.read(new File("Images/rock.png")), tile));
            texturePaints.add(new TexturePaint(ImageIO.read(new File("Images/mineral.png")), tile));
            texturePaints.add(new TexturePaint(ImageIO.read(new File("Images/target.png")), tile));
            texturePaints.add(new TexturePaint(ImageIO.read(new File("Images/warning.png")), tile));
        } catch(FileNotFoundException fnfe) {
            System.out.println("ERROR: Invalid texture paint, file not found" + fnfe);
        }
        catch (IOException ioe) {
            ioe.printStackTrace();
        }
    }
    
    /**
     * Draws the level to the canvas, may be recalled periodically.
     * Usually invoked via the overriden paintComponent(Graphics g) method
     * 
     * @param g Reference to the Graphics element
     */    
    private void doDrawing(Graphics g)    
    {   
        //Surface specific G2D is used to paint entire 
        //  grid regardless of tilemap data to provide 
        //  background for tiles with transparent areas
        Graphics2D surfaceG2D = (Graphics2D) g.create();
        surfaceG2D.setPaint(texturePaints.get(0));
        for(int i = 0; i < MAX_ROWS; i++)
        {
            for(int j = 0; j < MAX_COLUMNS; j++)
            {
                surfaceG2D.fillRect(i*TILE_SIZE, j*TILE_SIZE, TILE_SIZE, TILE_SIZE);
            }
        }
        
        //Singular generic G2D is used for tilemap data
        Graphics2D G2D = (Graphics2D) g.create();
        
        //Paint relevant to tilemap
        for(int y = 0; y < MAX_ROWS; y++)
        {
            for(int x = 0; x < MAX_COLUMNS; x++)
            {
                //Select paint type
                G2D.setPaint(texturePaints.get(tilemap[x][y]));
                //If tile is rover, record position
                if(tilemap[x][y] == 1)
                {
                    roverX = x;
                    roverY = y;
                }
                //Apply paint to current tile
                G2D.fillRect(x*TILE_SIZE, y*TILE_SIZE, //Coordinates
                                 TILE_SIZE, TILE_SIZE);    //Dimensions
            }
        }    
    }
    
    /**
     * Adds a new frame to the simulation framelist
     * 
     * @param newFrame The point data signifying the rover's movement within this frame
     */
    public void addFrame(Point newFrame)
    {
        frames.add(newFrame);
    }
    
    /**
     * Returns the rover's current position
     * 
     * @return the rover's current position
     */
    public Point getRoverPos()
    {
        return new Point(roverX, roverY);
    }
    
    /**
     * Returns the tile type at the specified position
     * 
     * @param x x-coordinate
     * @param y y-coordinate
     * @return Tile type of specified tile as an integer
     */
    public int getTile(int x, int y)
    {
        return tilemap[x][y];
    }
    
    /**
     * Updates the rover's position within the tilemap, ready for the next frame
     * Simulation is stopped if the rover has hit a rock or gone out of bounds
     */    
    public void updateRover()
    {
        //If reached the end of the simulation
        if(iFrame >= frames.size())
        {
            Rover.getRover().finished();
        }
        //If rover is attempting to go outside the level boundary
        else if (roverX + frames.get(iFrame).x >= MAX_COLUMNS //Too far right
             ||  roverX + frames.get(iFrame).x < 0            //Too far left
             ||  roverY + frames.get(iFrame).y >= MAX_ROWS    //Too far down
             ||  roverY + frames.get(iFrame).y < 0)           //Too far up
        {
            tilemap[roverX][roverY] = 5; //Draw warning to current position
            System.out.println("ERROR: Rover has lost connection to the sattelite!");
            System.out.println("       Where are you?!");
            Rover.getRover().finished();
        }
        else
        {            
            //Update tilemap
            //First, remove current rover position
            tilemap[roverX][roverY] = 0;
                        
            //Move rover into new position (logic layer)
            roverX += frames.get(iFrame).x;
            roverY += frames.get(iFrame).y;
        
            //Check what exists on tile rover is moving into   
            //  If safe, move rover into new position (visual layer)
            switch(tilemap[roverX][roverY])
            {
                case 0: //Surface
                    tilemap[roverX][roverY] = 1;
                    break;
                case 1: //Rover - Safety, shouldn't happen
                    tilemap[roverX][roverY] = 1;
                    break;
                case 2: //Rock
                    tilemap[roverX][roverY] = 5; //Draw warning
                    System.out.println("CRASH DETECTED");
                    Rover.getRover().finished();
                    break;
                case 3: //Mineral
                    tilemap[roverX][roverY] = 5; //Draw warning
                    System.out.println("CRASH DETECTED");
                    Rover.getRover().finished();
                    break; 
                case 4: //Target
                    tilemap[roverX][roverY] = 1;
                    System.out.println("REACHED TARGET!");
                    break;
                case 5: //Warning - Safety, shouldn't happen
                    tilemap[roverX][roverY] = 5;
                    System.out.println("CRASH DETECTED");
                    Rover.getRover().finished();
                    break;
                default://Safety - shouldn't happen
                    tilemap[roverX][roverY] = 1;
                    break;
            }
            System.out.println("UPDATED: " + roverX + ", " + roverY); // DEBUG ONLY 
                            
            iFrame++;  //inc framecounter
        }        
        repaint(); //repaint level
    }
    
    /**
     * Loads the new level, from button press. 
     * 
     * Method is separated from loadTilemap() to allow future, intermediate 
     * functionality to be added without issue
     * 
     * @param level 
     */    
    public void loadLevel(int level)
    {
        loadTilemap(new File("Levels/level" + level + ".txt"));
        loadFrames(level);
        Rover.getRover().reset();
    }
    
    /**
     * Loads tilemap for level from .txt file
     * 
     * Scans each tile in a row, per row (left-right, top-bottom)
     * This should not need any future modification if the TILE_SIZE changes,
     * nor if new tile types or level are added. This would only need to be 
     * modified should the level file format change.
     * 
     * @param fileToLoad The level file containing the tilemap data to load
     */
    
    public void loadTilemap(File fileToLoad) 
    {
        File levelFile = fileToLoad;
        boolean roverPainted = false; //Used to check if rover is painted twice
        try
        {
            Scanner scanner = new Scanner(levelFile);
            //Strict capture, instead of hasNextLine()
            // to enforce level grid size
            //Collect data for each column in row, then go to next row
            // 0 = surface, 1 = rover, 2 = rock, 3 = mineral
            for(int y = 0; y < Level.MAX_ROWS; y++)
            {
                for(int x = 0; x < Level.MAX_COLUMNS; x++)
                {
                    if(scanner.hasNext())
                    {
                        tilemap[x][y] = scanner.nextInt();
                        
                        //Check if this tile paint was a rover
                        if(tilemap[x][y] == 1)
                        {
                            //If rover has already been painted
                            if(roverPainted)
                            {
                                System.out.println("WARNING: Multiple rovers exist. "
                                                          + "Please fix level file. ");
                            }
                            roverPainted = true; //Set roverPainted to true
                        }
                    }
                    else
                    {
                        tilemap[x][y] = 0;
                    }
                }
            }
            scanner.close();
            repaint();
        }
        catch (FileNotFoundException e) 
        {
            System.out.println("Invalid Level File");
            e.printStackTrace();
        }
    }    
    
    /**
     * Runs the user's code to generate a list of frames for the simulation
     * Unfortunately hardcoded, anything beyond 5-10 levels might become messy
     * 
     * @param level Level number, indicating which file to run
     */
    private void loadFrames(int level)
    {
        //Clear out any past frames, reset iFrame counter
        frames.clear();
        iFrame = 0;
        //Switch statement not possible due to redeclaration
        // Refactor needed if no. of levels exceeds 10
        if(level==0)
        {
            //Level zero does not allow user control, just a splashscreen
        }
        else if(level == 1)
        {
            LevelOne userCode = new LevelOne();
            userCode.main();
        }
        else if(level == 2)
        {
            LevelTwo userCode = new LevelTwo();
            userCode.main();
        }
        else if(level == 3)
        {
            LevelThree userCode = new LevelThree();
            userCode.main();
        }
        else if(level == 4)
        {
            LevelFour userCode = new LevelFour();
            userCode.main();
        }
        else if(level == 5)
        {
            LevelFive userCode = new LevelFive();
            userCode.main();
        }
        else
        {
            System.out.println("Invalid level");
        }
    }
    
    /**
     * Overrides the default Graphics2D paintComponent() method, to ensure
     * the custom doDrawing() method is always invoked after superclass method
     * 
     * @param g Graphics reference
     */
    
    @Override
    public void paintComponent(Graphics g) 
    {
        super.paintComponent(g);
        doDrawing(g);
    }
    
    /**
     * Resets the level, ready for a new simulation.
     */
    public void reset(int level)
    {
        loadLevel(level);
        Rover.getRover().reset();
    }
}